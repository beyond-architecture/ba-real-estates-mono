generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  passwordHash String

  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
  isArchived Boolean  @default(false)

  contactInfo ContactInfo?

  manager      User?   @relation("ManagerSubordinates", fields: [managerId], references: [id])
  managerId    String? @map("manager_id")
  subordinates User[]  @relation("ManagerSubordinates")

  role Role? @relation(fields: [roleId], references: [id]) // onsave get all the role's contract templates and create a contract for each one

  roleId   String?
  jobTitle String  @default("Agent")

  startDate DateTime  @default(now())
  endDate   DateTime?

  contracts ContractFile[]

  // todo: remove these ***********
  updatedAuthors Author[]
  updatedBooks   Book[]
  updatedStores  Store[]
  // *****************************
  SignUpStep     SignUpStep[]
}

model ContactInfo {
  id        String @id @default(cuid())
  address   String @default("not set")
  phone     String @default("not set")
  telephone String @default("not set")

  personalEmail String @unique
  businessEmail String @unique

  emergencyContact        String @default("not set")
  emergencyContactPhone   String @default("not set")
  emergencyContactEmail   String @default("not set")
  emergencyContactAddress String @default("not set")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users             User[]
  contractTemplates ContractTemplate[]
}

model ContractTemplate {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  year        Int
  active      Boolean @default(true)

  templateLink String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contracts ContractFile[]
  Role      Role[]
}

model ContractFile {
  id String @id @default(cuid())

  template   ContractTemplate @relation(fields: [templateId], references: [id])
  templateId String

  fileLink String?
  isSigned Boolean   @default(false)
  verified Boolean   @default(false)
  signedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model SignUpStep {
  id        String  @id @default(cuid())
  step      Int
  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// todo: remove these *********************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************

model Author {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  bio             String?
  updatedAt       DateTime @updatedAt
  updatedByUserId String?

  books     Book[]
  updatedBy User?  @relation(fields: [updatedByUserId], references: [id])

  @@unique([firstName, lastName])
}

model Book {
  id              String   @id @default(cuid())
  title           String
  excerpt         String?
  authorId        String
  price           Decimal
  updatedAt       DateTime @updatedAt
  updatedByUserId String?
  author          Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  stores    Store[]
  updatedBy User?   @relation(fields: [updatedByUserId], references: [id])
}

model Store {
  id              String   @id @default(cuid())
  name            String
  updatedAt       DateTime @updatedAt
  updatedByUserId String?

  books     Book[]
  updatedBy User?  @relation(fields: [updatedByUserId], references: [id])
}
